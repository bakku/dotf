// Code generated by MockGen. DO NOT EDIT.
// Source: sysop.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSysOpsProvider is a mock of SysOpsProvider interface
type MockSysOpsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSysOpsProviderMockRecorder
}

// MockSysOpsProviderMockRecorder is the mock recorder for MockSysOpsProvider
type MockSysOpsProviderMockRecorder struct {
	mock *MockSysOpsProvider
}

// NewMockSysOpsProvider creates a new mock instance
func NewMockSysOpsProvider(ctrl *gomock.Controller) *MockSysOpsProvider {
	mock := &MockSysOpsProvider{ctrl: ctrl}
	mock.recorder = &MockSysOpsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSysOpsProvider) EXPECT() *MockSysOpsProviderMockRecorder {
	return m.recorder
}

// GetEnvVar mocks base method
func (m *MockSysOpsProvider) GetEnvVar(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvVar", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEnvVar indicates an expected call of GetEnvVar
func (mr *MockSysOpsProviderMockRecorder) GetEnvVar(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvVar", reflect.TypeOf((*MockSysOpsProvider)(nil).GetEnvVar), s)
}

// GetPathSep mocks base method
func (m *MockSysOpsProvider) GetPathSep() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathSep")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPathSep indicates an expected call of GetPathSep
func (mr *MockSysOpsProviderMockRecorder) GetPathSep() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathSep", reflect.TypeOf((*MockSysOpsProvider)(nil).GetPathSep))
}

// PathExists mocks base method
func (m *MockSysOpsProvider) PathExists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PathExists indicates an expected call of PathExists
func (mr *MockSysOpsProviderMockRecorder) PathExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockSysOpsProvider)(nil).PathExists), path)
}

// Log mocks base method
func (m *MockSysOpsProvider) Log(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", message)
}

// Log indicates an expected call of Log
func (mr *MockSysOpsProviderMockRecorder) Log(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockSysOpsProvider)(nil).Log), message)
}

// ReadLine mocks base method
func (m *MockSysOpsProvider) ReadLine() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLine")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLine indicates an expected call of ReadLine
func (mr *MockSysOpsProviderMockRecorder) ReadLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLine", reflect.TypeOf((*MockSysOpsProvider)(nil).ReadLine))
}
