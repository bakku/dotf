// Code generated by MockGen. DO NOT EDIT.
// Source: sysop.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dotf "bakku.dev/dotf"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSysOpsProvider is a mock of SysOpsProvider interface
type MockSysOpsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSysOpsProviderMockRecorder
}

// MockSysOpsProviderMockRecorder is the mock recorder for MockSysOpsProvider
type MockSysOpsProviderMockRecorder struct {
	mock *MockSysOpsProvider
}

// NewMockSysOpsProvider creates a new mock instance
func NewMockSysOpsProvider(ctrl *gomock.Controller) *MockSysOpsProvider {
	mock := &MockSysOpsProvider{ctrl: ctrl}
	mock.recorder = &MockSysOpsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSysOpsProvider) EXPECT() *MockSysOpsProviderMockRecorder {
	return m.recorder
}

// GetEnvVar mocks base method
func (m *MockSysOpsProvider) GetEnvVar(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvVar", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEnvVar indicates an expected call of GetEnvVar
func (mr *MockSysOpsProviderMockRecorder) GetEnvVar(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvVar", reflect.TypeOf((*MockSysOpsProvider)(nil).GetEnvVar), s)
}

// GetPathSep mocks base method
func (m *MockSysOpsProvider) GetPathSep() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathSep")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPathSep indicates an expected call of GetPathSep
func (mr *MockSysOpsProviderMockRecorder) GetPathSep() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathSep", reflect.TypeOf((*MockSysOpsProvider)(nil).GetPathSep))
}

// CleanPath mocks base method
func (m *MockSysOpsProvider) CleanPath(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanPath", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// CleanPath indicates an expected call of CleanPath
func (mr *MockSysOpsProviderMockRecorder) CleanPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanPath", reflect.TypeOf((*MockSysOpsProvider)(nil).CleanPath), path)
}

// PathExists mocks base method
func (m *MockSysOpsProvider) PathExists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PathExists indicates an expected call of PathExists
func (mr *MockSysOpsProviderMockRecorder) PathExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockSysOpsProvider)(nil).PathExists), path)
}

// ExpandPath mocks base method
func (m *MockSysOpsProvider) ExpandPath(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandPath", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandPath indicates an expected call of ExpandPath
func (mr *MockSysOpsProviderMockRecorder) ExpandPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandPath", reflect.TypeOf((*MockSysOpsProvider)(nil).ExpandPath), path)
}

// Log mocks base method
func (m *MockSysOpsProvider) Log(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", message)
}

// Log indicates an expected call of Log
func (mr *MockSysOpsProviderMockRecorder) Log(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockSysOpsProvider)(nil).Log), message)
}

// ReadLine mocks base method
func (m *MockSysOpsProvider) ReadLine() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLine")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLine indicates an expected call of ReadLine
func (mr *MockSysOpsProviderMockRecorder) ReadLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLine", reflect.TypeOf((*MockSysOpsProvider)(nil).ReadLine))
}

// SerializeConfig mocks base method
func (m *MockSysOpsProvider) SerializeConfig(c dotf.Config) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializeConfig", c)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerializeConfig indicates an expected call of SerializeConfig
func (mr *MockSysOpsProviderMockRecorder) SerializeConfig(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeConfig", reflect.TypeOf((*MockSysOpsProvider)(nil).SerializeConfig), c)
}

// DeserializeConfig mocks base method
func (m *MockSysOpsProvider) DeserializeConfig(raw []byte, c *dotf.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeserializeConfig", raw, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeserializeConfig indicates an expected call of DeserializeConfig
func (mr *MockSysOpsProviderMockRecorder) DeserializeConfig(raw, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeserializeConfig", reflect.TypeOf((*MockSysOpsProvider)(nil).DeserializeConfig), raw, c)
}

// WriteFile mocks base method
func (m *MockSysOpsProvider) WriteFile(path string, content []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", path, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockSysOpsProviderMockRecorder) WriteFile(path, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockSysOpsProvider)(nil).WriteFile), path, content)
}

// ReadFile mocks base method
func (m *MockSysOpsProvider) ReadFile(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockSysOpsProviderMockRecorder) ReadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockSysOpsProvider)(nil).ReadFile), path)
}

// CopyFile mocks base method
func (m *MockSysOpsProvider) CopyFile(src, dest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", src, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile
func (mr *MockSysOpsProviderMockRecorder) CopyFile(src, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockSysOpsProvider)(nil).CopyFile), src, dest)
}

// UpdateRepo mocks base method
func (m *MockSysOpsProvider) UpdateRepo(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepo", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepo indicates an expected call of UpdateRepo
func (mr *MockSysOpsProviderMockRecorder) UpdateRepo(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockSysOpsProvider)(nil).UpdateRepo), path)
}

// CommitRepo mocks base method
func (m *MockSysOpsProvider) CommitRepo(path, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitRepo", path, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitRepo indicates an expected call of CommitRepo
func (mr *MockSysOpsProviderMockRecorder) CommitRepo(path, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitRepo", reflect.TypeOf((*MockSysOpsProvider)(nil).CommitRepo), path, message)
}
